# app/repositories/ocr_repository.py
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import List, Optional, Dict, Any

from ..models.ocr_model import (
    Receipt, ShillaReceipt, Passport, ReceiptMatchLog, 
    UnrecognizedImage, ProcessingArchive, MatchingHistory
)

class OcrRepository:
    def __init__(self, db: Session):
        self.db = db
    
    # === ÏòÅÏàòÏ¶ù Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def create_receipt(self, user_id: int, receipt_number: str, file_path: str) -> Receipt:
        """Î°ØÎç∞ ÏòÅÏàòÏ¶ù ÏÉùÏÑ±"""
        receipt = Receipt(
            user_id=user_id,
            receipt_number=receipt_number,
            file_path=file_path
        )
        self.db.add(receipt)
        self.db.commit()
        self.db.refresh(receipt)
        return receipt
    
    def create_shilla_receipt(self, user_id: int, receipt_number: str, 
                            passport_number: Optional[str], file_path: str) -> ShillaReceipt:
        """Ïã†Îùº ÏòÅÏàòÏ¶ù ÏÉùÏÑ±"""
        receipt = ShillaReceipt(
            user_id=user_id,
            receipt_number=receipt_number,
            passport_number=passport_number,
            file_path=file_path
        )
        self.db.add(receipt)
        self.db.commit()
        self.db.refresh(receipt)
        return receipt
    
    def get_user_receipts(self, user_id: int) -> List[Receipt]:
        """ÏÇ¨Ïö©ÏûêÏùò Î°ØÎç∞ ÏòÅÏàòÏ¶ù Î™©Î°ù Ï°∞Ìöå"""
        return self.db.query(Receipt).filter(Receipt.user_id == user_id).all()
    
    def get_user_shilla_receipts(self, user_id: int) -> List[ShillaReceipt]:
        """ÏÇ¨Ïö©ÏûêÏùò Ïã†Îùº ÏòÅÏàòÏ¶ù Î™©Î°ù Ï°∞Ìöå"""
        return self.db.query(ShillaReceipt).filter(ShillaReceipt.user_id == user_id).all()
    
    def update_receipt(self, receipt_id: int, user_id: int, **kwargs) -> Optional[Receipt]:
        """ÏòÅÏàòÏ¶ù Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏"""
        receipt = self.db.query(Receipt).filter(
            Receipt.id == receipt_id, 
            Receipt.user_id == user_id
        ).first()
        
        if not receipt:
            return None
        
        for key, value in kwargs.items():
            if hasattr(receipt, key):
                setattr(receipt, key, value)
        
        self.db.commit()
        self.db.refresh(receipt)
        return receipt
    
    def update_shilla_receipt(self, receipt_id: int, user_id: int, **kwargs) -> Optional[ShillaReceipt]:
        """Ïã†Îùº ÏòÅÏàòÏ¶ù Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏"""
        print(f"üîç Repository - update_shilla_receipt ÏãúÏûë")
        print(f"üîç receipt_id: {receipt_id}, user_id: {user_id}")
        print(f"üîç ÏóÖÎç∞Ïù¥Ìä∏ Îç∞Ïù¥ÌÑ∞: {kwargs}")
        
        try:
            # ÏòÅÏàòÏ¶ù Ï°∞Ìöå
            receipt = self.db.query(ShillaReceipt).filter(
                ShillaReceipt.id == receipt_id,
                ShillaReceipt.user_id == user_id
            ).first()
            
            print(f"üîç Ï°∞ÌöåÎêú ÏòÅÏàòÏ¶ù: {receipt}")
            
            if not receipt:
                print(f"‚ùå ÏòÅÏàòÏ¶ùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå!")
                return None
            
            print(f"üîç ÏàòÏ†ï Ï†Ñ ÏòÅÏàòÏ¶ù Ï†ïÎ≥¥:")
            print(f"  - ID: {receipt.id}")
            print(f"  - Í∏∞Ï°¥ ÏòÅÏàòÏ¶ùÎ≤àÌò∏: {receipt.receipt_number}")
            print(f"  - Í∏∞Ï°¥ Ïó¨Í∂åÎ≤àÌò∏: {receipt.passport_number}")
            
            # ÌïÑÎìú ÏóÖÎç∞Ïù¥Ìä∏
            for key, value in kwargs.items():
                if hasattr(receipt, key):
                    old_value = getattr(receipt, key)
                    setattr(receipt, key, value)
                    print(f"üîç {key}: {old_value} -> {value}")
                else:
                    print(f"‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî ÌïÑÎìú: {key}")
            
            self.db.commit()
            self.db.refresh(receipt)
            
            print(f"‚úÖ ÏòÅÏàòÏ¶ù ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å!")
            print(f"  - ÏÉà ÏòÅÏàòÏ¶ùÎ≤àÌò∏: {receipt.receipt_number}")
            print(f"  - ÏÉà Ïó¨Í∂åÎ≤àÌò∏: {receipt.passport_number}")
            
            return receipt
            
        except Exception as e:
            print(f"‚ùå Repository Ïò§Î•ò: {e}")
            import traceback
            traceback.print_exc()
            self.db.rollback()
            return None
    
    # === Ïó¨Í∂å Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def create_passport(self, user_id: int, name: str, passport_number: str, 
                       birthday: Optional[str], file_path: str) -> Passport:
        """Ïó¨Í∂å Ï†ïÎ≥¥ ÏÉùÏÑ±"""
        passport = Passport(
            user_id=user_id,
            name=name,
            passport_number=passport_number,
            birthday=birthday,
            file_path=file_path
        )
        self.db.add(passport)
        self.db.commit()
        self.db.refresh(passport)
        return passport
    
    def get_user_passports(self, user_id: int) -> List[Passport]:
        """ÏÇ¨Ïö©ÏûêÏùò Ïó¨Í∂å Î™©Î°ù Ï°∞Ìöå"""
        return self.db.query(Passport).filter(Passport.user_id == user_id).all()
    
    def get_unmatched_passports(self, user_id: int) -> List[Passport]:
        """Îß§Ïπ≠ÎêòÏßÄ ÏïäÏùÄ Ïó¨Í∂å Î™©Î°ù Ï°∞Ìöå"""
        return self.db.query(Passport).filter(
            Passport.user_id == user_id,
            Passport.is_matched == False
        ).all()
    
    def update_passport(self, passport_id: int, user_id: int, **kwargs) -> Optional[Passport]:
        """Ïó¨Í∂å Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏"""
        passport = self.db.query(Passport).filter(
            Passport.id == passport_id,
            Passport.user_id == user_id
        ).first()
        
        if not passport:
            return None
        
        for key, value in kwargs.items():
            if hasattr(passport, key):
                setattr(passport, key, value)
        
        self.db.commit()
        self.db.refresh(passport)
        return passport
    
    def update_passport_matching_status(self, passport_name: str, user_id: int, is_matched: bool) -> bool:
        """Ïó¨Í∂å Îß§Ïπ≠ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏"""
        passport = self.db.query(Passport).filter(
            Passport.name == passport_name,
            Passport.user_id == user_id
        ).first()
        
        if passport:
            passport.is_matched = is_matched
            self.db.commit()
            return True
        return False
    
    # === Îß§Ïπ≠ Î°úÍ∑∏ Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def create_match_log(self, user_id: int, receipt_number: str, is_matched: bool, **kwargs) -> ReceiptMatchLog:
        """Îß§Ïπ≠ Î°úÍ∑∏ ÏÉùÏÑ±"""
        match_log = ReceiptMatchLog(
            user_id=user_id,
            receipt_number=receipt_number,
            is_matched=is_matched,
            **kwargs
        )
        self.db.add(match_log)
        self.db.commit()
        self.db.refresh(match_log)
        return match_log
    
    def get_match_logs(self, user_id: int) -> List[ReceiptMatchLog]:
        """ÏÇ¨Ïö©ÏûêÏùò Îß§Ïπ≠ Î°úÍ∑∏ Ï°∞Ìöå"""
        return self.db.query(ReceiptMatchLog).filter(ReceiptMatchLog.user_id == user_id).all()
    
    # === Ïù∏ÏãùÎêòÏßÄ ÏïäÏùÄ Ïù¥ÎØ∏ÏßÄ Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def create_unrecognized_image(self, user_id: int, file_path: str) -> UnrecognizedImage:
        """Ïù∏ÏãùÎêòÏßÄ ÏïäÏùÄ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±"""
        unrecognized = UnrecognizedImage(
            user_id=user_id,
            file_path=file_path
        )
        self.db.add(unrecognized)
        self.db.commit()
        self.db.refresh(unrecognized)
        return unrecognized
    
    # === Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def clear_user_session_data(self, user_id: int) -> bool:
        """ÏÇ¨Ïö©ÏûêÏùò ÌòÑÏû¨ ÏÑ∏ÏÖò Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú"""
        try:
            # Îß§Ïπ≠ Î°úÍ∑∏ ÏÇ≠Ï†ú
            self.db.query(ReceiptMatchLog).filter(ReceiptMatchLog.user_id == user_id).delete()
            
            # ÏòÅÏàòÏ¶ù Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
            self.db.query(Receipt).filter(Receipt.user_id == user_id).delete()
            self.db.query(ShillaReceipt).filter(ShillaReceipt.user_id == user_id).delete()
            
            # Ïó¨Í∂å Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
            self.db.query(Passport).filter(Passport.user_id == user_id).delete()
            
            # Ïù∏ÏãùÎêòÏßÄ ÏïäÏùÄ Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            self.db.query(UnrecognizedImage).filter(UnrecognizedImage.user_id == user_id).delete()
            
            # Ïã†Îùº ÏóëÏÖÄ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Ïó¨Í∂åÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî
            try:
                self.db.execute(text("""
                    UPDATE shilla_excel_data 
                    SET passport_number = NULL 
                    WHERE passport_number IS NOT NULL
                """))
            except Exception as e:
                print(f"Ïã†Îùº ÏóëÏÖÄ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî Ïò§Î•ò: {e}")
            
            self.db.commit()
            return True
        except Exception as e:
            self.db.rollback()
            print(f"Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú Ïò§Î•ò: {e}")
            return False
    
    # === ÌÜµÍ≥Ñ Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def get_user_statistics(self, user_id: int) -> Dict[str, Any]:
        """ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ Ï°∞Ìöå"""
        try:
            # Ïã†ÎùºÏôÄ Î°ØÎç∞ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò ÌôïÏù∏
            shilla_count = self.db.query(ShillaReceipt).filter(ShillaReceipt.user_id == user_id).count()
            lotte_count = self.db.query(Receipt).filter(Receipt.user_id == user_id).count()
            
            duty_free_type = "shilla" if shilla_count >= lotte_count else "lotte"
            
            if duty_free_type == "shilla":
                # Ïã†Îùº Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ
                stats_sql = text("""
                SELECT 
                    COUNT(DISTINCT sr.id) as total_receipts,
                    COUNT(DISTINCT CASE WHEN se."receiptNumber" IS NOT NULL THEN sr.id END) as matched_receipts,
                    COUNT(DISTINCT p.id) as total_passports,
                    COUNT(DISTINCT CASE WHEN p.is_matched = TRUE THEN p.id END) as matched_passports
                FROM shilla_receipts sr
                LEFT JOIN shilla_excel_data se ON se."receiptNumber"::text = sr.receipt_number
                LEFT JOIN passports p ON p.user_id = sr.user_id
                WHERE sr.user_id = :user_id
                """)
            else:
                # Î°ØÎç∞ Îç∞Ïù¥ÌÑ∞ ÌÜµÍ≥Ñ
                stats_sql = text("""
                SELECT 
                    COUNT(DISTINCT r.id) as total_receipts,
                    COUNT(DISTINCT CASE WHEN rml.is_matched = TRUE THEN r.id END) as matched_receipts,
                    COUNT(DISTINCT p.id) as total_passports,
                    COUNT(DISTINCT CASE WHEN p.is_matched = TRUE THEN p.id END) as matched_passports
                FROM receipts r
                LEFT JOIN receipt_match_log rml ON r.receipt_number = rml.receipt_number AND rml.user_id = r.user_id
                LEFT JOIN passports p ON p.user_id = r.user_id
                WHERE r.user_id = :user_id
                """)
            
            result = self.db.execute(stats_sql, {"user_id": user_id}).first()
            
            if result:
                return {
                    "total_receipts": result[0] or 0,
                    "matched_receipts": result[1] or 0,
                    "total_passports": result[2] or 0,
                    "matched_passports": result[3] or 0,
                    "unmatched_receipts": (result[0] or 0) - (result[1] or 0),
                    "unmatched_passports": (result[2] or 0) - (result[3] or 0),
                    "duty_free_type": duty_free_type
                }
            else:
                return {
                    "total_receipts": 0, "matched_receipts": 0,
                    "total_passports": 0, "matched_passports": 0,
                    "unmatched_receipts": 0, "unmatched_passports": 0,
                    "duty_free_type": duty_free_type
                }
        except Exception as e:
            print(f"ÌÜµÍ≥Ñ Ï°∞Ìöå Ïò§Î•ò: {e}")
            return {
                "total_receipts": 0, "matched_receipts": 0,
                "total_passports": 0, "matched_passports": 0,
                "unmatched_receipts": 0, "unmatched_passports": 0,
                "duty_free_type": "lotte"
            }
    
    # === ÏïÑÏπ¥Ïù¥Î∏å Í¥ÄÎ†® Î©îÏÑúÎìú ===
    def create_archive(self, user_id: int, session_name: str, **kwargs) -> ProcessingArchive:
        """ÏïÑÏπ¥Ïù¥Î∏å ÏÉùÏÑ±"""
        archive = ProcessingArchive(
            user_id=user_id,
            session_name=session_name,
            **kwargs
        )
        self.db.add(archive)
        self.db.commit()
        self.db.refresh(archive)
        return archive
    
    def get_user_archives(self, user_id: int, limit: int = 50) -> List[ProcessingArchive]:
        """ÏÇ¨Ïö©Ïûê ÏïÑÏπ¥Ïù¥Î∏å Î™©Î°ù Ï°∞Ìöå"""
        return self.db.query(ProcessingArchive).filter(
            ProcessingArchive.user_id == user_id
        ).order_by(ProcessingArchive.archive_date.desc()).limit(limit).all()
    
    def create_matching_history(self, user_id: int, archive_id: int, **kwargs) -> MatchingHistory:
        """Îß§Ïπ≠ ÌûàÏä§ÌÜ†Î¶¨ ÏÉùÏÑ±"""
        history = MatchingHistory(
            user_id=user_id,
            archive_id=archive_id,
            **kwargs
        )
        self.db.add(history)
        self.db.commit()
        self.db.refresh(history)
        return history